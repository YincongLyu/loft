// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_DDL_LOFT_H_
#define FLATBUFFERS_GENERATED_DDL_LOFT_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace loft {

struct DDL;
struct DDLBuilder;

struct DDL FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef DDLBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CHECK_POINT = 4,
    VT_DB_NAME = 6,
    VT_DDL_SQL = 8,
    VT_DDL_TYPE = 10,
    VT_LAST_COMMIT = 12,
    VT_LSN = 14,
    VT_MSG_TIME = 16,
    VT_OP_TYPE = 18,
    VT_SCN = 20,
    VT_SEQ = 22,
    VT_TABLE_ = 24,
    VT_TX_SEQ = 26,
    VT_TX_TIME = 28
  };
  const ::flatbuffers::String *check_point() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CHECK_POINT);
  }
  const ::flatbuffers::String *db_name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DB_NAME);
  }
  const ::flatbuffers::String *ddl_sql() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DDL_SQL);
  }
  const ::flatbuffers::String *ddl_type() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DDL_TYPE);
  }
  int64_t last_commit() const {
    return GetField<int64_t>(VT_LAST_COMMIT, 0);
  }
  int64_t lsn() const {
    return GetField<int64_t>(VT_LSN, 0);
  }
  const ::flatbuffers::String *msg_time() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MSG_TIME);
  }
  const ::flatbuffers::String *op_type() const {
    return GetPointer<const ::flatbuffers::String *>(VT_OP_TYPE);
  }
  int64_t scn() const {
    return GetField<int64_t>(VT_SCN, 0);
  }
  int64_t seq() const {
    return GetField<int64_t>(VT_SEQ, 0);
  }
  const ::flatbuffers::String *table_() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TABLE_);
  }
  int64_t tx_seq() const {
    return GetField<int64_t>(VT_TX_SEQ, 0);
  }
  const ::flatbuffers::String *tx_time() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TX_TIME);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_CHECK_POINT) &&
           verifier.VerifyString(check_point()) &&
           VerifyOffset(verifier, VT_DB_NAME) &&
           verifier.VerifyString(db_name()) &&
           VerifyOffset(verifier, VT_DDL_SQL) &&
           verifier.VerifyString(ddl_sql()) &&
           VerifyOffset(verifier, VT_DDL_TYPE) &&
           verifier.VerifyString(ddl_type()) &&
           VerifyField<int64_t>(verifier, VT_LAST_COMMIT, 8) &&
           VerifyField<int64_t>(verifier, VT_LSN, 8) &&
           VerifyOffset(verifier, VT_MSG_TIME) &&
           verifier.VerifyString(msg_time()) &&
           VerifyOffset(verifier, VT_OP_TYPE) &&
           verifier.VerifyString(op_type()) &&
           VerifyField<int64_t>(verifier, VT_SCN, 8) &&
           VerifyField<int64_t>(verifier, VT_SEQ, 8) &&
           VerifyOffset(verifier, VT_TABLE_) &&
           verifier.VerifyString(table_()) &&
           VerifyField<int64_t>(verifier, VT_TX_SEQ, 8) &&
           VerifyOffset(verifier, VT_TX_TIME) &&
           verifier.VerifyString(tx_time()) &&
           verifier.EndTable();
  }
};

struct DDLBuilder {
  typedef DDL Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_check_point(::flatbuffers::Offset<::flatbuffers::String> check_point) {
    fbb_.AddOffset(DDL::VT_CHECK_POINT, check_point);
  }
  void add_db_name(::flatbuffers::Offset<::flatbuffers::String> db_name) {
    fbb_.AddOffset(DDL::VT_DB_NAME, db_name);
  }
  void add_ddl_sql(::flatbuffers::Offset<::flatbuffers::String> ddl_sql) {
    fbb_.AddOffset(DDL::VT_DDL_SQL, ddl_sql);
  }
  void add_ddl_type(::flatbuffers::Offset<::flatbuffers::String> ddl_type) {
    fbb_.AddOffset(DDL::VT_DDL_TYPE, ddl_type);
  }
  void add_last_commit(int64_t last_commit) {
    fbb_.AddElement<int64_t>(DDL::VT_LAST_COMMIT, last_commit, 0);
  }
  void add_lsn(int64_t lsn) {
    fbb_.AddElement<int64_t>(DDL::VT_LSN, lsn, 0);
  }
  void add_msg_time(::flatbuffers::Offset<::flatbuffers::String> msg_time) {
    fbb_.AddOffset(DDL::VT_MSG_TIME, msg_time);
  }
  void add_op_type(::flatbuffers::Offset<::flatbuffers::String> op_type) {
    fbb_.AddOffset(DDL::VT_OP_TYPE, op_type);
  }
  void add_scn(int64_t scn) {
    fbb_.AddElement<int64_t>(DDL::VT_SCN, scn, 0);
  }
  void add_seq(int64_t seq) {
    fbb_.AddElement<int64_t>(DDL::VT_SEQ, seq, 0);
  }
  void add_table_(::flatbuffers::Offset<::flatbuffers::String> table_) {
    fbb_.AddOffset(DDL::VT_TABLE_, table_);
  }
  void add_tx_seq(int64_t tx_seq) {
    fbb_.AddElement<int64_t>(DDL::VT_TX_SEQ, tx_seq, 0);
  }
  void add_tx_time(::flatbuffers::Offset<::flatbuffers::String> tx_time) {
    fbb_.AddOffset(DDL::VT_TX_TIME, tx_time);
  }
  explicit DDLBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<DDL> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<DDL>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<DDL> CreateDDL(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> check_point = 0,
    ::flatbuffers::Offset<::flatbuffers::String> db_name = 0,
    ::flatbuffers::Offset<::flatbuffers::String> ddl_sql = 0,
    ::flatbuffers::Offset<::flatbuffers::String> ddl_type = 0,
    int64_t last_commit = 0,
    int64_t lsn = 0,
    ::flatbuffers::Offset<::flatbuffers::String> msg_time = 0,
    ::flatbuffers::Offset<::flatbuffers::String> op_type = 0,
    int64_t scn = 0,
    int64_t seq = 0,
    ::flatbuffers::Offset<::flatbuffers::String> table_ = 0,
    int64_t tx_seq = 0,
    ::flatbuffers::Offset<::flatbuffers::String> tx_time = 0) {
  DDLBuilder builder_(_fbb);
  builder_.add_tx_seq(tx_seq);
  builder_.add_seq(seq);
  builder_.add_scn(scn);
  builder_.add_lsn(lsn);
  builder_.add_last_commit(last_commit);
  builder_.add_tx_time(tx_time);
  builder_.add_table_(table_);
  builder_.add_op_type(op_type);
  builder_.add_msg_time(msg_time);
  builder_.add_ddl_type(ddl_type);
  builder_.add_ddl_sql(ddl_sql);
  builder_.add_db_name(db_name);
  builder_.add_check_point(check_point);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<DDL> CreateDDLDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *check_point = nullptr,
    const char *db_name = nullptr,
    const char *ddl_sql = nullptr,
    const char *ddl_type = nullptr,
    int64_t last_commit = 0,
    int64_t lsn = 0,
    const char *msg_time = nullptr,
    const char *op_type = nullptr,
    int64_t scn = 0,
    int64_t seq = 0,
    const char *table_ = nullptr,
    int64_t tx_seq = 0,
    const char *tx_time = nullptr) {
  auto check_point__ = check_point ? _fbb.CreateString(check_point) : 0;
  auto db_name__ = db_name ? _fbb.CreateString(db_name) : 0;
  auto ddl_sql__ = ddl_sql ? _fbb.CreateString(ddl_sql) : 0;
  auto ddl_type__ = ddl_type ? _fbb.CreateString(ddl_type) : 0;
  auto msg_time__ = msg_time ? _fbb.CreateString(msg_time) : 0;
  auto op_type__ = op_type ? _fbb.CreateString(op_type) : 0;
  auto table___ = table_ ? _fbb.CreateString(table_) : 0;
  auto tx_time__ = tx_time ? _fbb.CreateString(tx_time) : 0;
  return loft::CreateDDL(
      _fbb,
      check_point__,
      db_name__,
      ddl_sql__,
      ddl_type__,
      last_commit,
      lsn,
      msg_time__,
      op_type__,
      scn,
      seq,
      table___,
      tx_seq,
      tx_time__);
}

inline const loft::DDL *GetDDL(const void *buf) {
  return ::flatbuffers::GetRoot<loft::DDL>(buf);
}

inline const loft::DDL *GetSizePrefixedDDL(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<loft::DDL>(buf);
}

inline bool VerifyDDLBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<loft::DDL>(nullptr);
}

inline bool VerifySizePrefixedDDLBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<loft::DDL>(nullptr);
}

inline void FinishDDLBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<loft::DDL> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedDDLBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<loft::DDL> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace loft

#endif  // FLATBUFFERS_GENERATED_DDL_LOFT_H_
